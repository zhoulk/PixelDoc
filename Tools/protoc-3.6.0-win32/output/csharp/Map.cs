// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: map.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Msg {

  /// <summary>Holder for reflection information generated from map.proto</summary>
  public static partial class MapReflection {

    #region Descriptor
    /// <summary>File descriptor for map.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MapReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgltYXAucHJvdG8SA21zZxoJZXJyLnByb3RvIhAKDkNoYXB0ZXJSZXF1ZXN0",
            "ImsKD0NoYXB0ZXJSZXNwb25zZRIfCgRjb2RlGAEgASgOMhEubXNnLlJlc3Bv",
            "bnNlQ29kZRIXCgNlcnIYAiABKAsyCi5tc2cuRXJyb3ISHgoIY2hhcHRlcnMY",
            "AyADKAsyDC5tc2cuQ2hhcHRlciJkCgdDaGFwdGVyEgoKAklkGAEgASgFEgwK",
            "BE5hbWUYAiABKAkSDgoGSXNPcGVuGAMgASgIEgwKBFN0YXIYBCABKAUSDgoG",
            "U3RhdHVzGAUgASgFEhEKCUd1YW5LYU51bRgGIAEoBSIPCg1HdWFuS2FSZXF1",
            "ZXN0ImgKDkd1YW5LYVJlc3BvbnNlEh8KBGNvZGUYASABKA4yES5tc2cuUmVz",
            "cG9uc2VDb2RlEhcKA2VychgCIAEoCzIKLm1zZy5FcnJvchIcCgdndWFuS2Fz",
            "GAMgAygLMgsubXNnLkd1YW5LYSK8AQoGR3VhbkthEgoKAklkGAEgASgFEgwK",
            "BE5hbWUYAiABKAkSEQoJQ2hhcHRlcklkGAMgASgFEhcKBEVhcm4YBCABKAsy",
            "CS5tc2cuRWFybhIbCgZFeHBlbmQYBSABKAsyCy5tc2cuRXhwZW5kEg4KBklz",
            "T3BlbhgGIAEoCBIMCgRTdGFyGAcgASgFEg4KBlN0YXR1cxgIIAEoBRINCgVU",
            "aW1lcxgJIAEoBRISCgpUb3RhbFRpbWVzGAogASgFIkkKBEVhcm4SDwoHSXRl",
            "bUlkcxgBIAMoCRIPCgdIZXJvRXhwGAIgASgFEhEKCVBsYXllckV4cBgDIAEo",
            "BRIMCgRHb2xkGAQgASgFIhcKBkV4cGVuZBINCgVQb3dlchgBIAEoBWIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Msg.ErrReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.ChapterRequest), global::Msg.ChapterRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.ChapterResponse), global::Msg.ChapterResponse.Parser, new[]{ "Code", "Err", "Chapters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.Chapter), global::Msg.Chapter.Parser, new[]{ "Id", "Name", "IsOpen", "Star", "Status", "GuanKaNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.GuanKaRequest), global::Msg.GuanKaRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.GuanKaResponse), global::Msg.GuanKaResponse.Parser, new[]{ "Code", "Err", "GuanKas" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.GuanKa), global::Msg.GuanKa.Parser, new[]{ "Id", "Name", "ChapterId", "Earn", "Expend", "IsOpen", "Star", "Status", "Times", "TotalTimes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.Earn), global::Msg.Earn.Parser, new[]{ "ItemIds", "HeroExp", "PlayerExp", "Gold" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.Expend), global::Msg.Expend.Parser, new[]{ "Power" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ChapterRequest : pb::IMessage<ChapterRequest> {
    private static readonly pb::MessageParser<ChapterRequest> _parser = new pb::MessageParser<ChapterRequest>(() => new ChapterRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChapterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MapReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChapterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChapterRequest(ChapterRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChapterRequest Clone() {
      return new ChapterRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChapterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChapterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChapterRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ChapterResponse : pb::IMessage<ChapterResponse> {
    private static readonly pb::MessageParser<ChapterResponse> _parser = new pb::MessageParser<ChapterResponse>(() => new ChapterResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChapterResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MapReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChapterResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChapterResponse(ChapterResponse other) : this() {
      code_ = other.code_;
      err_ = other.err_ != null ? other.err_.Clone() : null;
      chapters_ = other.chapters_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChapterResponse Clone() {
      return new ChapterResponse(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Msg.ResponseCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.ResponseCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "err" field.</summary>
    public const int ErrFieldNumber = 2;
    private global::Msg.Error err_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Error Err {
      get { return err_; }
      set {
        err_ = value;
      }
    }

    /// <summary>Field number for the "chapters" field.</summary>
    public const int ChaptersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Msg.Chapter> _repeated_chapters_codec
        = pb::FieldCodec.ForMessage(26, global::Msg.Chapter.Parser);
    private readonly pbc::RepeatedField<global::Msg.Chapter> chapters_ = new pbc::RepeatedField<global::Msg.Chapter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.Chapter> Chapters {
      get { return chapters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChapterResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChapterResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (!object.Equals(Err, other.Err)) return false;
      if(!chapters_.Equals(other.chapters_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (err_ != null) hash ^= Err.GetHashCode();
      hash ^= chapters_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (err_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Err);
      }
      chapters_.WriteTo(output, _repeated_chapters_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (err_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Err);
      }
      size += chapters_.CalculateSize(_repeated_chapters_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChapterResponse other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.err_ != null) {
        if (err_ == null) {
          err_ = new global::Msg.Error();
        }
        Err.MergeFrom(other.Err);
      }
      chapters_.Add(other.chapters_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            code_ = (global::Msg.ResponseCode) input.ReadEnum();
            break;
          }
          case 18: {
            if (err_ == null) {
              err_ = new global::Msg.Error();
            }
            input.ReadMessage(err_);
            break;
          }
          case 26: {
            chapters_.AddEntriesFrom(input, _repeated_chapters_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Chapter : pb::IMessage<Chapter> {
    private static readonly pb::MessageParser<Chapter> _parser = new pb::MessageParser<Chapter>(() => new Chapter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Chapter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MapReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chapter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chapter(Chapter other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      isOpen_ = other.isOpen_;
      star_ = other.star_;
      status_ = other.status_;
      guanKaNum_ = other.guanKaNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chapter Clone() {
      return new Chapter(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsOpen" field.</summary>
    public const int IsOpenFieldNumber = 3;
    private bool isOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOpen {
      get { return isOpen_; }
      set {
        isOpen_ = value;
      }
    }

    /// <summary>Field number for the "Star" field.</summary>
    public const int StarFieldNumber = 4;
    private int star_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Star {
      get { return star_; }
      set {
        star_ = value;
      }
    }

    /// <summary>Field number for the "Status" field.</summary>
    public const int StatusFieldNumber = 5;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "GuanKaNum" field.</summary>
    public const int GuanKaNumFieldNumber = 6;
    private int guanKaNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuanKaNum {
      get { return guanKaNum_; }
      set {
        guanKaNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Chapter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Chapter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (IsOpen != other.IsOpen) return false;
      if (Star != other.Star) return false;
      if (Status != other.Status) return false;
      if (GuanKaNum != other.GuanKaNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (IsOpen != false) hash ^= IsOpen.GetHashCode();
      if (Star != 0) hash ^= Star.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (GuanKaNum != 0) hash ^= GuanKaNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (IsOpen != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsOpen);
      }
      if (Star != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Star);
      }
      if (Status != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Status);
      }
      if (GuanKaNum != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(GuanKaNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (IsOpen != false) {
        size += 1 + 1;
      }
      if (Star != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Star);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (GuanKaNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuanKaNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Chapter other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.IsOpen != false) {
        IsOpen = other.IsOpen;
      }
      if (other.Star != 0) {
        Star = other.Star;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.GuanKaNum != 0) {
        GuanKaNum = other.GuanKaNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            IsOpen = input.ReadBool();
            break;
          }
          case 32: {
            Star = input.ReadInt32();
            break;
          }
          case 40: {
            Status = input.ReadInt32();
            break;
          }
          case 48: {
            GuanKaNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GuanKaRequest : pb::IMessage<GuanKaRequest> {
    private static readonly pb::MessageParser<GuanKaRequest> _parser = new pb::MessageParser<GuanKaRequest>(() => new GuanKaRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuanKaRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MapReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuanKaRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuanKaRequest(GuanKaRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuanKaRequest Clone() {
      return new GuanKaRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuanKaRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuanKaRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuanKaRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GuanKaResponse : pb::IMessage<GuanKaResponse> {
    private static readonly pb::MessageParser<GuanKaResponse> _parser = new pb::MessageParser<GuanKaResponse>(() => new GuanKaResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuanKaResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MapReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuanKaResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuanKaResponse(GuanKaResponse other) : this() {
      code_ = other.code_;
      err_ = other.err_ != null ? other.err_.Clone() : null;
      guanKas_ = other.guanKas_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuanKaResponse Clone() {
      return new GuanKaResponse(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Msg.ResponseCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.ResponseCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "err" field.</summary>
    public const int ErrFieldNumber = 2;
    private global::Msg.Error err_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Error Err {
      get { return err_; }
      set {
        err_ = value;
      }
    }

    /// <summary>Field number for the "guanKas" field.</summary>
    public const int GuanKasFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Msg.GuanKa> _repeated_guanKas_codec
        = pb::FieldCodec.ForMessage(26, global::Msg.GuanKa.Parser);
    private readonly pbc::RepeatedField<global::Msg.GuanKa> guanKas_ = new pbc::RepeatedField<global::Msg.GuanKa>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.GuanKa> GuanKas {
      get { return guanKas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuanKaResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuanKaResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (!object.Equals(Err, other.Err)) return false;
      if(!guanKas_.Equals(other.guanKas_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (err_ != null) hash ^= Err.GetHashCode();
      hash ^= guanKas_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (err_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Err);
      }
      guanKas_.WriteTo(output, _repeated_guanKas_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (err_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Err);
      }
      size += guanKas_.CalculateSize(_repeated_guanKas_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuanKaResponse other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.err_ != null) {
        if (err_ == null) {
          err_ = new global::Msg.Error();
        }
        Err.MergeFrom(other.Err);
      }
      guanKas_.Add(other.guanKas_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            code_ = (global::Msg.ResponseCode) input.ReadEnum();
            break;
          }
          case 18: {
            if (err_ == null) {
              err_ = new global::Msg.Error();
            }
            input.ReadMessage(err_);
            break;
          }
          case 26: {
            guanKas_.AddEntriesFrom(input, _repeated_guanKas_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GuanKa : pb::IMessage<GuanKa> {
    private static readonly pb::MessageParser<GuanKa> _parser = new pb::MessageParser<GuanKa>(() => new GuanKa());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuanKa> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MapReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuanKa() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuanKa(GuanKa other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      chapterId_ = other.chapterId_;
      earn_ = other.earn_ != null ? other.earn_.Clone() : null;
      expend_ = other.expend_ != null ? other.expend_.Clone() : null;
      isOpen_ = other.isOpen_;
      star_ = other.star_;
      status_ = other.status_;
      times_ = other.times_;
      totalTimes_ = other.totalTimes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuanKa Clone() {
      return new GuanKa(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ChapterId" field.</summary>
    public const int ChapterIdFieldNumber = 3;
    private int chapterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChapterId {
      get { return chapterId_; }
      set {
        chapterId_ = value;
      }
    }

    /// <summary>Field number for the "Earn" field.</summary>
    public const int EarnFieldNumber = 4;
    private global::Msg.Earn earn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Earn Earn {
      get { return earn_; }
      set {
        earn_ = value;
      }
    }

    /// <summary>Field number for the "Expend" field.</summary>
    public const int ExpendFieldNumber = 5;
    private global::Msg.Expend expend_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Expend Expend {
      get { return expend_; }
      set {
        expend_ = value;
      }
    }

    /// <summary>Field number for the "IsOpen" field.</summary>
    public const int IsOpenFieldNumber = 6;
    private bool isOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOpen {
      get { return isOpen_; }
      set {
        isOpen_ = value;
      }
    }

    /// <summary>Field number for the "Star" field.</summary>
    public const int StarFieldNumber = 7;
    private int star_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Star {
      get { return star_; }
      set {
        star_ = value;
      }
    }

    /// <summary>Field number for the "Status" field.</summary>
    public const int StatusFieldNumber = 8;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "Times" field.</summary>
    public const int TimesFieldNumber = 9;
    private int times_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    /// <summary>Field number for the "TotalTimes" field.</summary>
    public const int TotalTimesFieldNumber = 10;
    private int totalTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalTimes {
      get { return totalTimes_; }
      set {
        totalTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuanKa);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuanKa other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (ChapterId != other.ChapterId) return false;
      if (!object.Equals(Earn, other.Earn)) return false;
      if (!object.Equals(Expend, other.Expend)) return false;
      if (IsOpen != other.IsOpen) return false;
      if (Star != other.Star) return false;
      if (Status != other.Status) return false;
      if (Times != other.Times) return false;
      if (TotalTimes != other.TotalTimes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ChapterId != 0) hash ^= ChapterId.GetHashCode();
      if (earn_ != null) hash ^= Earn.GetHashCode();
      if (expend_ != null) hash ^= Expend.GetHashCode();
      if (IsOpen != false) hash ^= IsOpen.GetHashCode();
      if (Star != 0) hash ^= Star.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Times != 0) hash ^= Times.GetHashCode();
      if (TotalTimes != 0) hash ^= TotalTimes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (ChapterId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChapterId);
      }
      if (earn_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Earn);
      }
      if (expend_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Expend);
      }
      if (IsOpen != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsOpen);
      }
      if (Star != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Star);
      }
      if (Status != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Status);
      }
      if (Times != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Times);
      }
      if (TotalTimes != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(TotalTimes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChapterId);
      }
      if (earn_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Earn);
      }
      if (expend_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expend);
      }
      if (IsOpen != false) {
        size += 1 + 1;
      }
      if (Star != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Star);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Times);
      }
      if (TotalTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalTimes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuanKa other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ChapterId != 0) {
        ChapterId = other.ChapterId;
      }
      if (other.earn_ != null) {
        if (earn_ == null) {
          earn_ = new global::Msg.Earn();
        }
        Earn.MergeFrom(other.Earn);
      }
      if (other.expend_ != null) {
        if (expend_ == null) {
          expend_ = new global::Msg.Expend();
        }
        Expend.MergeFrom(other.Expend);
      }
      if (other.IsOpen != false) {
        IsOpen = other.IsOpen;
      }
      if (other.Star != 0) {
        Star = other.Star;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Times != 0) {
        Times = other.Times;
      }
      if (other.TotalTimes != 0) {
        TotalTimes = other.TotalTimes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            ChapterId = input.ReadInt32();
            break;
          }
          case 34: {
            if (earn_ == null) {
              earn_ = new global::Msg.Earn();
            }
            input.ReadMessage(earn_);
            break;
          }
          case 42: {
            if (expend_ == null) {
              expend_ = new global::Msg.Expend();
            }
            input.ReadMessage(expend_);
            break;
          }
          case 48: {
            IsOpen = input.ReadBool();
            break;
          }
          case 56: {
            Star = input.ReadInt32();
            break;
          }
          case 64: {
            Status = input.ReadInt32();
            break;
          }
          case 72: {
            Times = input.ReadInt32();
            break;
          }
          case 80: {
            TotalTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Earn : pb::IMessage<Earn> {
    private static readonly pb::MessageParser<Earn> _parser = new pb::MessageParser<Earn>(() => new Earn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Earn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MapReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Earn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Earn(Earn other) : this() {
      itemIds_ = other.itemIds_.Clone();
      heroExp_ = other.heroExp_;
      playerExp_ = other.playerExp_;
      gold_ = other.gold_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Earn Clone() {
      return new Earn(this);
    }

    /// <summary>Field number for the "ItemIds" field.</summary>
    public const int ItemIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_itemIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> itemIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ItemIds {
      get { return itemIds_; }
    }

    /// <summary>Field number for the "HeroExp" field.</summary>
    public const int HeroExpFieldNumber = 2;
    private int heroExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroExp {
      get { return heroExp_; }
      set {
        heroExp_ = value;
      }
    }

    /// <summary>Field number for the "PlayerExp" field.</summary>
    public const int PlayerExpFieldNumber = 3;
    private int playerExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerExp {
      get { return playerExp_; }
      set {
        playerExp_ = value;
      }
    }

    /// <summary>Field number for the "Gold" field.</summary>
    public const int GoldFieldNumber = 4;
    private int gold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Earn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Earn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!itemIds_.Equals(other.itemIds_)) return false;
      if (HeroExp != other.HeroExp) return false;
      if (PlayerExp != other.PlayerExp) return false;
      if (Gold != other.Gold) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= itemIds_.GetHashCode();
      if (HeroExp != 0) hash ^= HeroExp.GetHashCode();
      if (PlayerExp != 0) hash ^= PlayerExp.GetHashCode();
      if (Gold != 0) hash ^= Gold.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      itemIds_.WriteTo(output, _repeated_itemIds_codec);
      if (HeroExp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HeroExp);
      }
      if (PlayerExp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlayerExp);
      }
      if (Gold != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Gold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += itemIds_.CalculateSize(_repeated_itemIds_codec);
      if (HeroExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroExp);
      }
      if (PlayerExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerExp);
      }
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Earn other) {
      if (other == null) {
        return;
      }
      itemIds_.Add(other.itemIds_);
      if (other.HeroExp != 0) {
        HeroExp = other.HeroExp;
      }
      if (other.PlayerExp != 0) {
        PlayerExp = other.PlayerExp;
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            itemIds_.AddEntriesFrom(input, _repeated_itemIds_codec);
            break;
          }
          case 16: {
            HeroExp = input.ReadInt32();
            break;
          }
          case 24: {
            PlayerExp = input.ReadInt32();
            break;
          }
          case 32: {
            Gold = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Expend : pb::IMessage<Expend> {
    private static readonly pb::MessageParser<Expend> _parser = new pb::MessageParser<Expend>(() => new Expend());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Expend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MapReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Expend() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Expend(Expend other) : this() {
      power_ = other.power_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Expend Clone() {
      return new Expend(this);
    }

    /// <summary>Field number for the "Power" field.</summary>
    public const int PowerFieldNumber = 1;
    private int power_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Expend);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Expend other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Power != other.Power) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Power != 0) hash ^= Power.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Power != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Power);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Expend other) {
      if (other == null) {
        return;
      }
      if (other.Power != 0) {
        Power = other.Power;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Power = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
